<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Processes specified Akamai logs for HTTP Status codes &#xd;
Requires Perl&#xd;
Overwritten</description>
  <logRotator class="hudson.tasks.LogRotator">
    <daysToKeep>-1</daysToKeep>
    <numToKeep>3</numToKeep>
    <artifactDaysToKeep>-1</artifactDaysToKeep>
    <artifactNumToKeep>-1</artifactNumToKeep>
  </logRotator>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.ChoiceParameterDefinition>
          <name>MAXFILES</name>
          <description>Leave 0  to do all files. Note it takes approx. 1 hour to process 100 files.</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>1</string>
              <string>20</string>
              <string>30</string>
              <string>40</string>
              <string>50</string>
              <string>100</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>APPLICATION</name>
          <description>Application logs to process</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>log1</string>
              <string>log2</string>
              <string>log3</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>SKIP</name>
          <description>Skip specified number of files to prevent dealing with the same files for subsequent reruns</description>
          <defaultValue>0</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>DEBUG</name>
          <description>Program logs details of its  execution when DEBUG is set</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>DEST_LOG_SHARE</name>
          <description></description>
          <defaultValue>D:\AKAMAI_LOGS\</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>LOG_SHARE</name>
          <description>AKAMAI Logs share </description>
          <defaultValue>\\vnx5700cifs\akamai_logs\carnival</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>LAST</name>
          <description>MAX age of logs to process in seconds
NOTE that currently there is no separate parameter for timezone .
The value of this parameter is somewhat misleading.</description>
          <defaultValue>2000</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>HEADER</name>
          <description>Keep the header lines in the filtered logs, listing the column names. Default is no headers</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>DATABASE</name>
          <description>Use database to track the history. Select path outside of WORKSPACE</description>
          <defaultValue>history.sqlite</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>USE_DATABASE</name>
          <description></description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <com.cwctravel.hudson.plugins.extended__choice__parameter.ExtendedChoiceParameterDefinition plugin="extended-choice-parameter@0.34">
          <name>SELECT_MATCHING</name>
          <description>Select to collect all statuses, select to collect every other</description>
          <quoteValue>false</quoteValue>
          <visibleItemCount>2</visibleItemCount>
          <type>PT_RADIO</type>
          <value>true,false</value>
          <defaultValue>true</defaultValue>
          <multiSelectDelimiter>,</multiSelectDelimiter>
        </com.cwctravel.hudson.plugins.extended__choice__parameter.ExtendedChoiceParameterDefinition>
        <hudson.model.TextParameterDefinition>
          <name>STATUS_CODES</name>
          <description>List of HTTP status codes to collect</description>
          <defaultValue>5\d\d
301
302
400
404
</defaultValue>
        </hudson.model.TextParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>ESCAPE</name>
          <description>Set checked to treat parameter literally</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.copyartifact.CopyArtifactPermissionProperty plugin="copyartifact@1.30">
      <projectNameList/>
    </hudson.plugins.copyartifact.CopyArtifactPermissionProperty>
    <com.synopsys.arc.jenkinsci.plugins.jobrestrictions.jobs.JobRestrictionProperty plugin="job-restrictions@0.3"/>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>(master)</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.BatchFile>
      <command>@echo OFF 
echo Running with parameters:
echo APPLICATION=%APPLICATION%
echo SKIP=%SKIP%
echo MAXFILES=%MAXFILES%
echo DEST_LOG_SHARE=%DEST_LOG_SHARE%
echo LOG_SHARE=%LOG_SHARE%
echo LAST=%LAST%
echo HEADER=%HEADER%

ECHO Delete old results 
REM Delete old results - both compressed and flat 
del /q *.filtered.log.*
REM
ECHO Delete Database
del /q logs.*.db 
del /q logs.db


copy /Y NUL dummy.filtered.log.gz</command>
    </hudson.tasks.BatchFile>
    <EnvInjectBuilder plugin="envinject@1.89">
      <info>
        <propertiesContent>ENVIRONMENT_VARIABLE_NAME=STATUS_CODES
BUILD_LOG=inputs.txt</propertiesContent>
      </info>
    </EnvInjectBuilder>
    <hudson.plugins.powershell.PowerShell plugin="powershell@1.2">
      <command>&lt;#
$env:ENVIRONMENT=&apos;DEV&apos;
$env:build_log = &apos;test.properties&apos;
$DebugPreference = &apos;Continue&apos;;
#&gt;
param (

  [string] $environment_variable_name = &apos;&apos;  ,
  [String] $build_log = &apos;&apos; 
  # use no-colliding $build_log name
)


if ($build_log -eq &apos;&apos;) {
  $build_log = $env:BUILD_LOG
}

if ($environment_variable_name -eq &apos;&apos;) {
  $environment_variable_name = $env:ENVIRONMENT_VARIABLE_NAME
}

# Handle debug flag 
[string]$debug_flag = &apos;&apos; 
if (($env:DEBUG -ne &apos;&apos;) -and ($env:DEBUG -ne $null) -and ($env:DEBUG -match &apos;true&apos;))  {
$debug_flag = &apos;-debug&apos;
$DebugPreference = &apos;Continue&apos;
}

function write_variable  {

param (
       [string] $variable_name, 
       [System.Management.Automation.PSReference] $variable_ref, 
       [string] $build_log 
 )

try {
  $data = &apos;&apos;
  write-debug ( &apos;variable type = {0}&apos; -f ( $variable_ref.Value.GetType() ) )
if ($variable_ref.Value.GetType() -match &apos;Object\[\]&apos;) {
  $data = ($variable_ref.Value -join &apos;,&apos;)
} else  {
  $data = $variable_ref.Value
}

write-output (&apos;{0}={1}&apos; -f $variable_name,  $data) | out-file -FilePath $build_log -Encoding ascii -Force -append
} catch [InvalidArgumentExcdption] {

}

}

pushd env:
[string]$environment_variable = (
 dir | where-object {$_.name -match $environment_variable_name }  | select-object -property Value ).Value
popd 
write-output &quot;Processing ${environment_variable_name} build parameter (raw):`n`n-------`n${environment_variable}`n-------`n&quot;



$status_codes_formatted = ($environment_variable -replace &quot;`n&quot;, &apos;,&apos;) 
write-output &quot;[1]Collapsed Lines:&quot;&quot;${status_codes_formatted}&quot;&quot;&quot;


if ($status_codes_formatted -match ( &quot;{0}=&apos;(.+)&apos;&quot; -f $environment_variable_name )) {
$regex = new-object System.Text.RegularExpressions.Regex((&quot;({0})=`&apos;(.+)`&apos;&quot; -f $environment_variable_name ))
$result = ($regex.Match($status_codes_formatted)).Groups[2]
$status_codes_formatted = $result.Value
}

write-output &quot;[2]Sanitized:&quot;&quot;${status_codes_formatted}&quot;&quot;&quot;

$status_codes_formatted = $status_codes_formatted -replace &apos;,,&apos; , &apos;,&apos;
$status_codes_formatted = $status_codes_formatted -replace &quot;,$&quot; , &apos;&apos;

write-output &quot;[3]Removed blanks:&quot;&quot;${status_codes_formatted}&quot;&quot;&quot;


write_variable $environment_variable_name ( [ref]$status_codes_formatted ) $build_log
exit 0
</command>
    </hudson.plugins.powershell.PowerShell>
    <hudson.plugins.powershell.PowerShell plugin="powershell@1.2">
      <command>&lt;# 
pushd env:
dir 
popd
#&gt;
# $env:STATUS_CODES= 
#

Return
write-output ( &quot;STATUS_CODES=&apos;{0}&apos;&quot; -f $env:STATUS_CODES )



$env:PATH=&quot;D:\PERL\BIN;$}env:PATH}&quot;
New-Item -Path &quot;${env:DEST_LOG_SHARE}\${env:APPLICATION}&quot; -ItemType directory -force -erroraction &apos;SilentlyContinue&apos;

# Patch the inputs 
[string]$escape_flag = &apos;&apos; 


# Patch the inputs 
[string]$debug_flag = &apos;&apos; 
if (($env:DEBUG -ne &apos;&apos;) -and ($env:DEBUG -ne $null) -and ($env:DEBUG -match &apos;true&apos;))  {
$debug_flag = &apos;-debug&apos;
}
write-output &quot;Processing STATUS_CODES build parameter (raw):`n`n-------`n${env:STATUS_CODES}`n-------`n&quot;

# NOTE double quotes.
$status_codes_formatted = ($env:STATUS_CODES -replace &quot;`n&quot;, &apos;,&apos;) 
write-output &quot;[1]Extracted Status Codes:`n`n-------`n${status_codes_formatted}`n-------`n&quot;

&lt;#  this is not working 
if ($status_codes_formatted -match  &quot;STATUS_CODES=&apos;(.+)&apos;&quot;) {
$status_codes_formatted = $status_codes_formatted -replace &quot;STATUS_CODES=&apos;(.+)&apos;&quot;, &quot;$1&quot;
}
#&gt; 
if ($status_codes_formatted -match  &quot;STATUS_CODES=&apos;(.+)&apos;&quot;) {
$regex = new-object System.Text.RegularExpressions.Regex(&quot;(STATUS_CODES)=`&apos;(.+)`&apos;&quot;)
# 
# $regex.Replace($status_codes_formatted, &quot;$2&quot;)
$result = ($regex.Match($status_codes_formatted)).Groups[2]
$status_codes_formatted = $result.Value
}

write-output &quot;[2]Extracted Status Codes:`n`n-------`n${status_codes_formatted}`n-------`n&quot;


# There 
[string]$command =  (&apos;perl log_filter.pl -maxfiles {0} -skip {1} -app {2} -last {3} -root &quot;{4}&quot; -status_codes &quot;{6}&quot; {7} -flat {5} &apos; -f
   $env:MAXFILES ,       # [0]
   $env:SKIP ,               # [1]
   $env:APPLICATION ,  # [2]
   $env:LAST ,             # [3]
   $env:LOG_SHARE ,   # [4]
   $debug_flag ,  # [5]
   $status_codes_formatted  ,# [6]
   $escape_flag # [7]
   )
write-output (&quot;Executing:`n  $command {0}&quot; -f $command ) 
invoke-expression -command $command 
</command>
    </hudson.plugins.powershell.PowerShell>
    <hudson.plugins.powershell.PowerShell plugin="powershell@1.2">
      <command>$logs_to_copy  = get-childitem -Filter &quot;*filtered.log*&quot; | where-object { -not  ( $_.Name -match &apos;dummy&apos; ) }

if ( $logs_to_copy -eq $null -or ($logs_to_copy.count  -eq 0) ){
write-output &apos;No new logs&apos;
exit 0 
} 

$dest_path = &quot;${env:DEST_LOG_SHARE}\${env:APPLICATION}&quot;

if  ( -not (get-item -path $dest_path -erroraction &apos;SilentlyContinue&apos; | where-object {$_.Attributes -match &apos;Directory&apos; } ) ) { 
 New-Item -ItemType directory -Path $dest_path
}



write-output (&apos;Copying new logs to {0}&apos; -f  $dest_path )

$logs_to_copy | format-list 

write-output @&quot;
Copy-item -Path &apos;*filtered.log*&apos; -Destination  &quot;${dest_path}&quot; -force -ErrorAction &apos;SilentlyContinue&apos;  
&quot;@
copy-item -Path &apos;*filtered.log*&apos; -Destination &quot;${dest_path}&quot;  -force -ErrorAction &apos;SilentlyContinue&apos; 
popd
</command>
    </hudson.plugins.powershell.PowerShell>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>inputs.txt</artifacts>
      <latestOnly>false</latestOnly>
      <allowEmptyArchive>true</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
    </hudson.tasks.ArtifactArchiver>
  </publishers>
  <buildWrappers/>
</project>
